from sklearn.ensemble import RandomForestClassifier as RF
from sklearn import cross_validation
from sklearn.metrics import confusion_matrix
import pandas as pd

from sklearn.metrics import roc_curve
from sklearn.metrics import auc
import matplotlib.pyplot as plt

subtrainLabel = pd.read_csv('subtrainLabels.csv')

#3-gram
subtrainfeature_3 = pd.read_csv("TF_top50_3gramfeature.csv")
subtrain_3 = pd.merge(subtrainLabel,subtrainfeature_3,on='Id')
labels_3 = subtrain_3.Class
subtrain_3.drop(["Class","Id"], axis=1, inplace=True)
subtrain_3 = subtrain_3.as_matrix()

X_train_3, X_test_3, y_train_3, y_test_3 = cross_validation.train_test_split(subtrain_3,labels_3,test_size=0.5)

srf_3 = RF(n_estimators=10, n_jobs=-1)
srf_3.fit(X_train_3,y_train_3)
print srf_3.score(X_test_3,y_test_3)

# y_pred = srf.predict(X_test)
# print confusion_matrix(y_test, y_pred)

# The random forest model by itself

y_pred_rf_3 = srf_3.predict_proba(X_test_3)[:, 1]
fpr_rf_3, tpr_rf_3, _ = roc_curve(y_test_3, y_pred_rf_3)
print auc(fpr_rf_3,tpr_rf_3)

print ('---------------------------')
plt.figure(1)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr_rf_3, tpr_rf_3, label='3-gram')
plt.ylabel('True positive rate')
plt.title('ROC curve')
plt.legend(loc='best')
plt.show()

plt.figure(2)
plt.xlim(0, 0.2)
plt.ylim(0.8, 1)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr_rf_3, tpr_rf_3, label='RF_3-gram')
plt.xlabel('False positive rate')
plt.ylabel('True positive rate')
plt.title('ROC curve (zoomed in at top left)')
plt.legend(loc='best')
plt.show()